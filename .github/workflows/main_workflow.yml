name: Build and Release

on:
  push:
    branches: [main, develop]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a new release"
        required: false
        default: false
        type: boolean
      release_type:
        description: "Release type"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      environment:
        description: "Target environment"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production

permissions:
  contents: write
  packages: write
  actions: read

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m -XX:+UseG1GC'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  determine-version:
    uses: ./.github/workflows/version.yml
    with:
      java_version: ${{ env.JAVA_VERSION }}

  build:
    needs: determine-version
    uses: ./.github/workflows/build.yml
    with:
      java_version: ${{ env.JAVA_VERSION }}
      maven_opts: ${{ env.MAVEN_OPTS }}
      version: ${{ needs.determine-version.outputs.version }}
      run_number: ${{ github.run_number }}

  docker-build:
    needs: [determine-version, build]
    if: success()
    uses: ./.github/workflows/docker.yml
    with:
      registry: ${{ env.REGISTRY }}
      image_name: ${{ env.IMAGE_NAME }}
      version: ${{ needs.determine-version.outputs.version }}
      run_number: ${{ github.run_number }}
    secrets:
      github_token: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [determine-version, build, docker-build]
    if: needs.determine-version.outputs.should_release == 'true'
    uses: ./.github/workflows/release.yml
    with:
      version: ${{ needs.determine-version.outputs.version }}
      is_prerelease: ${{ needs.determine-version.outputs.is_prerelease }}
      java_version: ${{ env.JAVA_VERSION }}
      maven_opts: ${{ env.MAVEN_OPTS }}
      registry: ${{ env.REGISTRY }}
      image_name: ${{ env.IMAGE_NAME }}
      run_number: ${{ github.run_number }}
    secrets:
      github_token: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: [determine-version, build, docker-build, create-release]
    if: always()
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "# 🎉 Build & Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "## ✅ Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version Determination | ${{ needs.determine-version.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Application Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Create Release | ${{ needs.create-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Build Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.determine-version.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Java Version:** ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Created:** ${{ needs.determine-version.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Is Prerelease:** ${{ needs.determine-version.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
            echo "- ☕ **JAR File** - Standalone executable" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 **ZIP Package** - Complete distribution" >> $GITHUB_STEP_SUMMARY
            echo "- 📁 **TAR.GZ Package** - Complete distribution (compressed)" >> $GITHUB_STEP_SUMMARY
            echo "- 🔐 **Checksums** - SHA256 verification" >> $GITHUB_STEP_SUMMARY

            if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
              echo "- 🐳 **Docker Image** - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.determine-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔗 Useful Links" >> $GITHUB_STEP_SUMMARY
            echo "- [📥 Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

            if [[ "${{ needs.create-release.result }}" == "success" ]]; then
              echo "- [🚀 View Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.determine-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY
            fi

            echo "- [🐳 Docker Image](https://github.com/${{ github.repository }}/pkgs/container/$(echo ${{ github.repository }} | cut -d'/' -f2))" >> $GITHUB_STEP_SUMMARY
            echo "- [📝 Commit Details](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          fi
