name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Get project version
        id: project-version
        run: |
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Project version: $VERSION"

      - name: Run tests
        run: ./mvnw clean test

      - name: Build application
        run: ./mvnw package -DskipTests

      - name: Create distribution directory
        run: |
          mkdir -p dist
          cp target/*.jar dist/
          cp docker-compose.yml dist/ || echo "docker-compose.yml not found"
          cp .env.example dist/ || echo ".env.example not found"
          
          # Create a simple start script
          cat > dist/start.sh << 'EOF'
          #!/bin/bash
          echo "Starting Modern JFX Spring Application..."
          java -jar *.jar
          EOF
          chmod +x dist/start.sh
          
          # Create README for the distribution
          cat > dist/README.md << 'EOF'
          # Modern JFX Spring Application
          
          ## Como executar:
          
          ### PrÃ©-requisitos:
          - Java 21 ou superior
          - PostgreSQL (ou usar Docker Compose)
          
          ### OpÃ§Ã£o 1: ExecuÃ§Ã£o direta
          ```bash
          ./start.sh
          ```
          
          ### OpÃ§Ã£o 2: ExecuÃ§Ã£o manual
          ```bash
          java -jar modern-jfx-spring-*.jar
          ```
          
          ### OpÃ§Ã£o 3: Com Docker Compose
          ```bash
          docker-compose up
          ```
          
          ## ConfiguraÃ§Ã£o:
          Configure as variÃ¡veis de ambiente no arquivo .env conforme .env.example
          EOF

      - name: Create ZIP package
        run: |
          cd dist
          zip -r ../modern-jfx-spring-${{ steps.project-version.outputs.version }}.zip .
          cd ..

      - name: Create TAR package
        run: |
          cd dist
          tar -czf ../modern-jfx-spring-${{ steps.project-version.outputs.version }}.tar.gz .
          cd ..

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: target/*.jar
          retention-days: 30

      - name: Upload ZIP distribution
        uses: actions/upload-artifact@v4
        with:
          name: distribution-zip
          path: modern-jfx-spring-${{ steps.project-version.outputs.version }}.zip
          retention-days: 30

      - name: Upload TAR distribution
        uses: actions/upload-artifact@v4
        with:
          name: distribution-tar
          path: modern-jfx-spring-${{ steps.project-version.outputs.version }}.tar.gz
          retention-days: 30

      - name: Upload complete distribution
        uses: actions/upload-artifact@v4
        with:
          name: complete-distribution
          path: |
            dist/
            modern-jfx-spring-${{ steps.project-version.outputs.version }}.zip
            modern-jfx-spring-${{ steps.project-version.outputs.version }}.tar.gz
          retention-days: 30

  docker-build:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-file
          path: target/

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM openjdk:21-jdk-slim
          
          WORKDIR /app
          
          # Install PostgreSQL client for health checks
          RUN apt-get update && apt-get install -y postgresql-client && rm -rf /var/lib/apt/lists/*
          
          COPY target/*.jar app.jar
          
          EXPOSE 8080
          
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8080/actuator/health || exit 1
          
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF

      - name: Build Docker image
        run: |
          docker build -t modern-jfx-spring:latest .
          docker save modern-jfx-spring:latest > modern-jfx-spring-docker.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: modern-jfx-spring-docker.tar
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Get project version
        id: project-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(date +'%Y%m%d-%H%M%S')-$(echo $GITHUB_SHA | cut -c1-7)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.project-version.outputs.version }}
          name: Release ${{ steps.project-version.outputs.version }}
          body: |
            ðŸš€ **Modern JFX Spring Application - Release ${{ steps.project-version.outputs.version }}**
            
            ## ðŸ“¦ Downloads DisponÃ­veis:
            
            ### Para usuÃ¡rios finais:
            - **ZIP**: Pacote completo com JAR, scripts e documentaÃ§Ã£o
            - **TAR.GZ**: Pacote completo em formato tar.gz
            
            ### Para desenvolvedores:
            - **JAR**: Arquivo executÃ¡vel da aplicaÃ§Ã£o
            - **Docker Image**: Imagem Docker da aplicaÃ§Ã£o
            
            ## ðŸš€ Como usar:
            
            1. **Download do ZIP/TAR**: Extrair e executar `./start.sh`
            2. **JAR direto**: `java -jar modern-jfx-spring-*.jar`
            3. **Docker**: Carregar a imagem e executar com docker-compose
            
            ## ðŸ“‹ Requisitos:
            - Java 21+
            - PostgreSQL (ou Docker)
            
            ---
            **Commit**: ${{ github.sha }}
            **ConstruÃ­do em**: ${{ github.run_number }}
          files: |
            distribution-zip/*
            distribution-tar/*
            jar-file/*
            docker-image/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: always()

    steps:
      - name: Build Summary
        run: |
          echo "## ðŸŽ‰ Build Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… JAR executable" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… ZIP distribution package" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… TAR.GZ distribution package" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Docker image" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”½ Como baixar:" >> $GITHUB_STEP_SUMMARY
          echo "1. VÃ¡ na aba **Actions** deste workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Clique em **Artifacts** no final da pÃ¡gina" >> $GITHUB_STEP_SUMMARY
          echo "3. Baixe o pacote desejado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“‹ Pacotes disponÃ­veis:" >> $GITHUB_STEP_SUMMARY
          echo "- **jar-file**: Apenas o JAR executÃ¡vel" >> $GITHUB_STEP_SUMMARY
          echo "- **distribution-zip**: Pacote completo em ZIP" >> $GITHUB_STEP_SUMMARY
          echo "- **distribution-tar**: Pacote completo em TAR.GZ" >> $GITHUB_STEP_SUMMARY
          echo "- **docker-image**: Imagem Docker" >> $GITHUB_STEP_SUMMARY
          echo "- **complete-distribution**: Todos os arquivos" >> $GITHUB_STEP_SUMMARY