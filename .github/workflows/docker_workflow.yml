name: Docker Build

on:
  workflow_call:
    inputs:
      registry:
        required: true
        type: string
      image_name:
        required: true
        type: string
      version:
        required: true
        type: string
      run_number:
        required: true
        type: string
    secrets:
      github_token:
        required: true

jobs:
  docker-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.github_token }}

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: jar-${{ inputs.run_number }}
          path: target/

      - name: Create optimized Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          # Multi-stage build para otimizar imagem
          FROM openjdk:21-jdk-slim as builder

          WORKDIR /app
          COPY target/*.jar app.jar

          # Extrair JAR para otimizar layers
          RUN java -Djarmode=layertools -jar app.jar extract

          # Imagem final
          FROM openjdk:21-jre-slim

          # Instalar dependências necessárias
          RUN apt-get update && \
              apt-get install -y --no-install-recommends \
                curl \
                postgresql-client && \
              rm -rf /var/lib/apt/lists/*

          # Criar usuário não-root
          RUN groupadd -r appgroup && useradd -r -g appgroup appuser

          WORKDIR /app

          # Copiar layers extraídas (melhor cache)
          COPY --from=builder --chown=appuser:appgroup /app/dependencies/ ./
          COPY --from=builder --chown=appuser:appgroup /app/spring-boot-loader/ ./
          COPY --from=builder --chown=appuser:appgroup /app/snapshot-dependencies/ ./
          COPY --from=builder --chown=appuser:appgroup /app/application/ ./

          # Configurar usuário
          USER appuser

          EXPOSE 8080

          # Health check
          HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
            CMD curl -f http://localhost:8080/actuator/health || exit 1

          # Configurar JVM para container
          ENV JAVA_OPTS="-Xmx512m -XX:+UseContainerSupport -XX:+UseG1GC"

          ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS org.springframework.boot.loader.JarLauncher"]
          EOF

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ inputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save Docker image for artifacts
        run: |
          docker pull ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.version }}
          docker save ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.version }} > my-spring-app-docker.tar
          gzip my-spring-app-docker.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ inputs.run_number }}
          path: my-spring-app-docker.tar.gz
          retention-days: 7
          compression-level: 1
